@use 'sass:map';
@import '../../scss/spacers';
@import '../../scss/breakpoints';
@import '../../scss/grid';
@import '../../scss/screen-reader';
@import '../../scss/supernova/styles/colors';

@mixin content-wrapper-with-icon-flex {
  display: flex;
  flex-direction: column;

  @media (min-width: map.get($grid-breakpoints, md)) {
    flex-direction: row;
  }
}

@mixin content-wrapper-with-icon-padding {
  padding-top: getSpacer(s);

  @media (min-width: map.get($grid-breakpoints, xl)) {
    padding-top: getSpacer(m);
  }
}

.highlightbox {
  $box: &;
  $colors: 'neutral', 'blueberry', 'cherry';

  // Medium og large har bakgrunnsfarge på den indre wrapperen
  // slik at bakgrunnsfargen ikke går helt ut i kantene
  &--medium,
  &--large {
    @each $color in $colors {
      &#{$box}--#{$color} {
        #{$box}__content-wrapper {
          background-color: var(--color-base-background-#{$color});
          border: 1px solid var(--color-base-border-#{$color});
        }
      }
    }

    // Hvit har sin egen regel siden den ikke har valører
    &#{$box}--white {
      #{$box}__content-wrapper {
        background-color: var(--color-base-background-white);
        border: 1px solid var(--color-base-border-onlight-subtle);
      }
    }
  }

  // large skal også ha bakgrunnsfarge på den ytre containeren på de minste skjermnene
  // slik at bakgrunnsfargen går helt ut til skjermkanten
  &--large {
    @each $color in $colors {
      &#{$box}--#{$color} {
        @include media-breakpoint-down(xs) {
          background-color: var(--color-base-background-#{$color});
        }
      }
    }

    &#{$box}--white {
      @include media-breakpoint-down(xs) {
        background-color: var(--color-base-background-white);
      }
    }
    #{$box}__content-wrapper {
      padding-top: getSpacer(m);
      padding-bottom: getSpacer(l);

      @media (min-width: map.get($grid-breakpoints, lg)) {
        padding-top: getSpacer(l);
        padding-bottom: getSpacer(xl);
      }
    }
  }

  &--medium {
    #{$box}__content-wrapper {
      padding: getSpacer(m) getSpacer(s) getSpacer(l) getSpacer(s);

      @media (min-width: map.get($grid-breakpoints, md)) {
        padding: getSpacer(m) getSpacer(m) getSpacer(l) getSpacer(m);
      }

      @media (min-width: map.get($grid-breakpoints, lg)) {
        padding: getSpacer(l);
      }
    }
  }

  // fluid skal ha bakgrunnsfarge på den ytre containeren
  &--fluid {
    padding: getSpacer(m) getSpacer(s) getSpacer(l) getSpacer(s);

    @media (min-width: map.get($grid-breakpoints, lg)) {
      padding: getSpacer(m) getSpacer(m) getSpacer(l) getSpacer(m);
    }

    @each $color in $colors {
      &#{$box}--#{$color} {
        background-color: var(--color-base-background-#{$color});
        border: 1px solid var(--color-base-border-#{$color});
      }
    }
    &#{$box}--white {
      background-color: var(--color-base-background-white);
      border: 1px solid var(--color-base-border-onlight-subtle);
    }
  }

  &--has-icon#{&}--medium {
    #{$box}__content-wrapper {
      @include content-wrapper-with-icon-flex;
      @include content-wrapper-with-icon-padding;

      @media (min-width: map.get($grid-breakpoints, lg)) {
        padding-left: getSpacer(m);
      }
    }
  }

  &--has-icon#{&}--large {
    #{$box}__col {
      @include content-wrapper-with-icon-flex;
    }
    #{$box}__content-wrapper {
      @include content-wrapper-with-icon-padding;

      @media (min-width: map.get($grid-breakpoints, sm)) {
        padding-left: getSpacer(s);
      }

      @media (min-width: map.get($grid-breakpoints, md)) {
        padding-left: getSpacer(m);
      }

      @media (min-width: map.get($grid-breakpoints, lg)) {
        padding-left: 0;
        padding-top: getSpacer(l);
        padding-bottom: getSpacer(xl);
      }
    }

    #{$box}__icon {
      @media (min-width: map.get($grid-breakpoints, lg)) {
        @include make-col-ready;
        @include make-col(2);

        display: flex;
        justify-content: flex-end;
        margin-right: 0;
        padding-right: getSpacer(s);
      }
    }

    #{$box}__content {
      @media (min-width: map.get($grid-breakpoints, lg)) {
        @include make-col-ready;
        @include make-col(8);
      }
    }
  }

  &__content {
    @media (min-width: map.get($grid-breakpoints, md)) {
      margin-top: 0.625rem;
    }
  }

  &--has-icon#{&}--fluid {
    @include content-wrapper-with-icon-flex;
    @include content-wrapper-with-icon-padding;
  }

  &__icon {
    display: inline-flex;
    margin-right: getSpacer(s);
    margin-bottom: getSpacer(2xs);

    @media (min-width: map.get($grid-breakpoints, md)) {
      margin-bottom: 0;
    }
  }

  &__row {
    @include make-row;
  }

  &__col {
    @include make-col-ready;
    @include make-col(12);

    &--offset {
      @media (min-width: map.get($grid-breakpoints, sm)) {
        @include make-col(10);
        @include make-col-offset(1);
      }

      @media (min-width: map.get($grid-breakpoints, lg)) {
        @include make-col(8);
        @include make-col-offset(2);
      }
    }

    &--large-with-icon {
      @media (min-width: map.get($grid-breakpoints, sm)) {
        @include make-col(11);
        @include make-col-offset(0);
      }

      @media (min-width: map.get($grid-breakpoints, lg)) {
        @include make-col(12);
      }
    }
  }
}

.mobile {
  display: flex;
  align-items: center;

  @media screen and (width >= 768px) {
    @include sr-only;
  }
}

.desktop {
  display: none;

  @media screen and (width >= 768px) {
    display: flex;
  }
}
