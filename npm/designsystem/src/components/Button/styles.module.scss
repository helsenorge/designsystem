@use 'sass:map';
@import '../../scss/spacers';
@import '../../scss/breakpoints';
@import '../../scss/palette';
@import '../../scss/font-settings';
@import '../../scss/screen-reader';

$dark-mode-disabled-transparrent: #ffffffb3;
$with-icons: // icon-class, size-class, padding-left, padding-right, padding-left desktop, padding-right desktop, svg-margin-left, svg-margin-right, svg-margin-left desktop, svg-margin-right desktop
  'left-icon' 'normal' getSpacer(xs) getSpacer(s) getSpacer(xs) getSpacer(m) 0 getSpacer(3xs) 0 getSpacer(2xs),
  'right-icon' 'normal' getSpacer(s) getSpacer(xs) getSpacer(m) getSpacer(xs) getSpacer(3xs) 0 getSpacer(2xs) 0,
  'left-icon' 'large' getSpacer(xs) getSpacer(m) getSpacer(s) getSpacer(l) 0 getSpacer(2xs) 0 getSpacer(xs),
  'right-icon' 'large' getSpacer(m) getSpacer(xs) getSpacer(l) getSpacer(s) getSpacer(2xs) 0 getSpacer(xs) 0,
  'arrow' 'normal' getSpacer(s) getSpacer(xs) getSpacer(m) getSpacer(xs) getSpacer(m) 0 getSpacer(l) 0,
  'arrow' 'large' getSpacer(m) getSpacer(xs) getSpacer(l) getSpacer(xs) getSpacer(l) 0 getSpacer(xl) 0,
  'arrow--both-icons' 'normal' 0 0 0 0 getSpacer(s) 0 getSpacer(m) 0,
  'arrow--both-icons' 'large' 0 0 0 0 getSpacer(m) 0 getSpacer(l) 0,
  'only-icon' 'normal' 0.062rem 0.062rem 0.375rem 0.375rem 0 0 0 0,
  'only-icon' 'large' 0.312rem 0.312rem getSpacer(3xs) getSpacer(3xs) 0 0 0 0,
  'both-icons' 'normal' getSpacer(xs) getSpacer(xs) getSpacer(xs) getSpacer(xs) 0 0 0 0,
  'both-icons' 'large' getSpacer(xs) getSpacer(xs) getSpacer(xs) getSpacer(xs) 0 0 0 0;

@mixin focus-shadow {
  box-shadow: 0 0 0 getSpacer(3xs) $black;
}

@mixin focus-shadow-on-dark {
  box-shadow: 0 0 0 getSpacer(3xs) $white;
}

@mixin outline-borderless($background-color) {
  background-color: transparent;

  &:hover {
    background-color: $background-color;
  }

  :disabled > & {
    background-color: transparent;
  }
}

@mixin outline($ouline-color, $hover-outline-color) {
  outline: getSpacer(4xs) solid $ouline-color;
  outline-offset: getSpacer(4xs) * -1;

  &:hover {
    box-shadow: none;
  }

  :disabled > & {
    outline-color: $neutral700;

    @media (min-width: map.get($grid-breakpoints, md)) {
      outline-color: $neutral500;
    }
  }
}

@mixin outline-text($color) {
  color: $color;

  :disabled > & {
    @media (min-width: map.get($grid-breakpoints, md)) {
      color: $neutral700;
    }
  }
}

@mixin borderless-text($color) {
  color: $color;

  :disabled > & {
    color: $neutral700;
  }
}

@mixin fill-on-dark($background-color) {
  background-color: $white;

  &:hover {
    box-shadow: none;
  }

  &:hover,
  :focus > & {
    background-color: $background-color;
  }

  :focus > & {
    @include focus-shadow-on-dark;

    &:hover {
      @include focus-shadow-on-dark;

      background-color: $white;
    }
  }

  /* stylelint-disable-next-line */
  :disabled > & {
    background-color: $dark-mode-disabled-transparrent;
  }
}

@mixin on-dark-text($color) {
  color: $color;

  :disabled > & {
    color: $neutral700;
  }
}

@mixin on-dark {
  &--on-dark {
    @include fill-on-dark($blueberry50);
  }
  &--on-dark#{&}--destructive {
    @include fill-on-dark($cherry50);
  }
  &--on-dark#{&}--outline,
  &--on-dark#{&}--borderless,
  &--on-dark#{&}--outline#{&}--destructive,
  &--on-dark#{&}--borderless#{&}--destructive {
    background-color: transparent;

    &:hover {
      background-color: $inverted-hover;
    }
  }
  &--on-dark#{&}--outline {
    outline-color: $white;

    :disabled > & {
      @media (min-width: map.get($grid-breakpoints, md)) {
        outline-color: $dark-mode-disabled-transparrent;
      }
    }
  }
  &--on-dark#{&}--borderless {
    :disabled > & {
      border-color: $dark-mode-disabled-transparrent;
    }
  }

  &--on-dark &__text {
    @include on-dark-text($blueberry600);
  }
  &--on-dark#{&}--destructive &__text {
    @include on-dark-text($cherry600);
  }
  &--on-dark#{&}--outline &__text,
  &--on-dark#{&}--borderless &__text {
    color: $white;

    :disabled > & {
      @media (min-width: map.get($grid-breakpoints, md)) {
        color: $dark-mode-disabled-transparrent;
      }
    }
  }
}

// UU krav om klikkbart område er 48x48px, button-wrapper fyller de manglende 8px i høyden på mobilskjerm (synlig button er 40px høy)
.button-wrapper {
  display: inline-flex;
  cursor: pointer;
  text-decoration: none;
  background-color: transparent;
  outline: none;
  border: 0;
  padding: 0;

  &--fluid {
    width: 100%;
  }

  &:disabled {
    cursor: not-allowed;
  }

  &:focus-visible {
    outline: none;
  }
}

.button {
  display: inline-flex;
  background-color: $blueberry500;
  padding: 0 getSpacer(m);
  font-size: $font-size-sm;
  font-weight: 600;
  font-family: inherit;
  line-height: 1.375rem;
  align-items: center;
  width: 100%;
  min-height: 2.75rem;
  box-sizing: border-box;
  outline: none;
  border: 0;
  border-radius: 0.5rem;
  letter-spacing: unset;

  &:hover {
    background-color: $blueberry700;
    box-shadow: 0 0 0 getSpacer(3xs) $blueberry700;
  }

  :disabled > & {
    pointer-events: none;
    outline: getSpacer(4xs) dashed $neutral700;
    outline-offset: getSpacer(4xs) * -1;
    background-color: $neutral200;
  }

  :disabled > & &__text {
    color: $neutral800;
  }

  @media (min-width: map.get($grid-breakpoints, md)) {
    min-height: 3.125rem;
    padding: 0 getSpacer(l);
    font-size: $font-size-md;
    line-height: 1.5rem;
  }

  &--large {
    min-height: 3.5rem;
    padding: 0 getSpacer(l);
    font-size: 1.3125rem;

    @media (min-width: map.get($grid-breakpoints, md)) {
      min-height: 4.5rem;
      padding: 0 getSpacer(xl);
      font-size: $font-size-lg;
      line-height: 1.5rem;
    }
  }

  @each $icon-class, $size-class, $pl, $pr, $pld, $prd, $svgml, $svgmr, $svgmld, $svgmrd in $with-icons {
    &--#{$icon-class}#{&}--#{$size-class} {
      padding-left: $pl;
      padding-right: $pr;

      @media (min-width: map.get($grid-breakpoints, md)) {
        padding-left: $pld;
        padding-right: $prd;
      }
    }
  }

  @each $icon-class, $size-class, $pl, $pr, $pld, $prd, $svgml, $svgmr, $svgmld, $svgmrd in $with-icons {
    &--#{$size-class} &__#{$icon-class} {
      margin-left: $svgml;
      margin-right: $svgmr;

      @media (min-width: map.get($grid-breakpoints, md)) {
        margin-left: $svgmld;
        margin-right: $svgmrd;
      }
    }
  }

  &--destructive {
    background-color: $cherry500;

    &:hover {
      background-color: $cherry700;
      box-shadow: 0 0 0 getSpacer(3xs) $cherry700;
    }
  }

  &--outline,
  &--borderless {
    @include outline-borderless(rgba(18, 111, 135, 0.1));
  }
  &--outline#{&}--destructive,
  &--borderless#{&}--destructive {
    @include outline-borderless($cherry50);
  }

  &--outline {
    @include outline($blueberry700, $blueberry50);
  }
  &--outline#{&}--destructive {
    @include outline($cherry700, $cherry50);
  }

  /* stylelint-disable-next-line */
  &--borderless:not(.button--only-icon) {
    padding: 0 getSpacer(3xs);
  }

  /* stylelint-disable-next-line */
  &--borderless {
    border-radius: 0;

    &:hover {
      box-shadow: none;
    }

    :disabled > & {
      outline: none;
    }
  }

  :focus > & {
    @include focus-shadow;

    &:hover {
      @include focus-shadow;
    }
  }

  /* stylelint-disable-next-line */
  &__text {
    color: $white;
    margin: 0 auto 0 0;
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;

    @media (min-width: map.get($grid-breakpoints, md)) {
      margin: 0 auto 0 0;
    }

    &--ellipsis {
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    }

    &--centered-mobile {
      @media (max-width: map.get($grid-max-breakpoints, xs)) {
        width: 100%;
      }
    }
  }

  &__right-unicode-arrow {
    white-space: pre;
  }

  /* stylelint-disable-next-line */
  &--outline &__text {
    @include outline-text($blueberry600);
  }
  &--outline#{&}--destructive &__text {
    @include outline-text($cherry600);
  }

  /* stylelint-disable-next-line */
  &--borderless &__text {
    @include borderless-text($blueberry600);
  }
  &--borderless#{&}--destructive &__text {
    @include borderless-text($cherry600);
  }

  /* stylelint-disable-next-line */
  &--only-icon &__text {
    @include sr-only;
  }

  @include on-dark;
}

.diagonal {
  display: block;
  transform: matrix(-1, 0, 0, 1, -8, 2);
  position: absolute;
  width: 3.7rem;
  height: 2.25rem;

  &__line {
    display: block;
    border-bottom: getSpacer(4xs) dashed $neutral500;
    transform-origin: top left;
    transform: rotate(37.4deg);
  }

  &--on-dark &__line {
    border-color: $white;

    @media (min-width: map.get($grid-breakpoints, md)) {
      border-color: $dark-mode-disabled-transparrent;
    }
  }
}
