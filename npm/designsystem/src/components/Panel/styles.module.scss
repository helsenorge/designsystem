@use 'sass:map';
@use '../../scss/spacers' as spacers;
@use '../../scss/palette' as palette;
@use '../../scss/font-settings' as font-settings;
@use '../../scss/breakpoints' as *;

@mixin panel-padding {
  padding: spacers.getSpacer(s);

  @media (min-width: map.get($grid-breakpoints, md)) {
    padding: spacers.getSpacer(l) spacers.getSpacer(m) spacers.getSpacer(l) spacers.getSpacer(l);
  }
}

@mixin panel-padding-icon {
  padding: spacers.getSpacer(m) spacers.getSpacer(s) spacers.getSpacer(l);

  @media (min-width: map.get($grid-breakpoints, md)) {
    padding: spacers.getSpacer(m) spacers.getSpacer(m) spacers.getSpacer(l);
  }
}

@mixin hover-and-focus-effects($background-color, $box-shadow-color) {
  &:hover {
    background-color: $background-color;
  }

  &:focus {
    box-shadow: inset 0 0 0 3px $box-shadow-color;
  }
}

$layout-sm-gap: spacers.getSpacer(s);
$layout-md-col-gap: spacers.getSpacer(m);

.panel-wrapper {
  width: 100%;
  outline: none;
}

.panel {
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
  outline: none;
  position: relative;
  width: 100%;
  box-sizing: border-box;

  @include panel-padding;

  &__layout-1,
  &__layout-2,
  &__layout-3 {
    display: grid;
    grid-auto-rows: auto;
    grid-template-columns: 1fr;
    gap: $layout-sm-gap $layout-sm-gap;
    width: 100%;

    @media (min-width: map.get($grid-breakpoints, md)) {
      column-gap: $layout-md-col-gap;
    }
  }

  &__layout-1 {
    &--with-icon {
      grid-template-columns: auto 1fr;
    }

    @media (min-width: map.get($grid-breakpoints, md)) {
      grid-template-rows: auto auto;
      grid-template-columns: 1fr auto;

      &--with-icon {
        grid-template-columns: auto 1fr auto;
      }

      &__content-a {
        grid-column: span 2;
      }
    }
  }

  &__layout-2 {
    &--with-icon {
      grid-template-columns: auto 1fr;
    }

    @media (min-width: map.get($grid-breakpoints, md)) {
      grid-template-rows: auto auto;
      grid-template-columns: 1fr auto;

      &--with-icon {
        grid-template-columns: auto 1fr auto;
      }

      &__content-a {
        grid-row: span 2;
      }

      &__last-column {
        max-width: 200px;
      }
    }

    @media (min-width: map.get($grid-breakpoints, lg)) {
      grid-template-columns: minmax(auto, 760px) auto;

      &--with-icon {
        grid-template-columns: auto minmax(auto, 760px) auto;
      }
    }
  }

  &__layout-3 {
    &--with-icon {
      grid-template-columns: auto 1fr;
    }

    &__last-column {
      display: grid;
      row-gap: $layout-sm-gap;
    }

    @media (min-width: map.get($grid-breakpoints, lg)) {
      grid-template-rows: auto;

      &--a {
        grid-template-columns: 3fr 2fr;
      }
      &--a#{&}--with-icon {
        grid-template-columns: auto 3fr 2fr;
      }

      &--b {
        grid-template-columns: 4.5fr 5.5fr;
      }
      &--b#{&}--with-icon {
        grid-template-columns: auto 4.5fr 5.5fr;
      }

      &--c {
        grid-template-columns: 3.5fr 6.5fr;
      }
      &--c#{&}--with-icon {
        grid-template-columns: auto 3.5fr 6.5fr;
      }

      &__last-column {
        grid-template-columns: 1fr auto;
        column-gap: $layout-md-col-gap;

        &__content-b {
          flex: 1;
        }
      }
    }
  }

  &--with-icon {
    @include panel-padding-icon;
  }

  &__icon {
    grid-row: span 3;

    &--no-content {
      grid-row: span 2;
    }

    &--layout-1,
    &--layout-2 {
      @media (min-width: map.get($grid-breakpoints, md)) {
        grid-row: span 2;
        padding-right: spacers.getSpacer(2xs);
      }
    }

    @media (min-width: map.get($grid-breakpoints, lg)) {
      grid-row: span 2;
      padding-right: spacers.getSpacer(2xs);
    }

    &--layout-3 {
      grid-row: span 2;

      @media (min-width: map.get($grid-breakpoints, lg)) {
        grid-row: span 1;
      }
    }
  }

  &__badge {
    display: inline-block;
    vertical-align: text-bottom;
    flex-shrink: 0;
  }

  &__btn-container {
    display: flex;
    flex-direction: column;
    justify-content: flex-end;

    &--no-content-b {
      @media (min-width: map.get($grid-breakpoints, lg)) {
        flex-direction: row;
        grid-column: span 2;
      }
    }

    &--no-button {
      flex-direction: column;
    }
  }

  &__details-btn {
    align-self: flex-start;

    @media (min-width: map.get($grid-breakpoints, lg)) {
      align-self: flex-end;
      margin-left: auto;
    }
  }

  &__expand {
    position: unset;

    &::after {
      inset: 0;
      content: '';
      position: absolute;
    }
  }

  &--fill {
    background-color: palette.$neutral50;
  }

  &--fill#{&}--selected {
    background-color: palette.$neutral100;
  }

  &--fill#{&}--selected#{&}--clickable {
    &:hover {
      background-color: palette.$neutral200;
    }
  }

  &--white {
    background-color: palette.$white;
  }

  &--fill#{&}--clickable,
  &--white#{&}--clickable {
    @include hover-and-focus-effects(palette.$neutral100, palette.$neutral600);
  }

  &--white#{&}--selected {
    box-shadow: inset 0 0 0 6px palette.$neutral100;
  }

  &--stroke {
    border: 6px solid palette.$neutral100;
  }

  &--stroke#{&}--clickable {
    @include hover-and-focus-effects(palette.$neutral50, palette.$neutral100);

    &:focus {
      border-color: palette.$neutral600;
    }
  }

  &--line {
    background-color: palette.$white;
    border-color: palette.$neutral500;
    border-top: 1px solid;
    border-bottom: 1px solid;
  }

  &--line#{&}--clickable {
    @include hover-and-focus-effects(palette.$neutral50, palette.$neutral600);
  }

  &--line#{&}--selected {
    background-color: palette.$neutral50;
    border-bottom: 0;
  }

  &--line#{&}--selected#{&}--clickable {
    &:hover {
      background-color: palette.$neutral100;
    }
  }

  &--no-top-border#{&}--line {
    border-top: none;
  }

  &--button {
    cursor: pointer;
  }

  &--status {
    &::before {
      content: '';
      position: absolute;
      border-left: 0.375rem;
      top: 0;
      left: 0;
      height: 100%;
      border-left-style: solid;
    }
  }

  &--new {
    &::before {
      border-left-color: palette.$blueberry600;
    }
  }

  &--draft {
    &::before {
      border-left-style: dashed;
      border-left-color: palette.$neutral500;
    }
  }

  &--error {
    &::before {
      border-left-color: palette.$cherry500;
    }
  }
}

.title-container {
  padding-bottom: spacers.getSpacer(s);

  &--no-content-a {
    padding-bottom: 0;
  }

  &__title {
    vertical-align: top;
    display: inline;

    &--badge {
      padding-right: spacers.getSpacer(2xs);
    }
  }

  @media (max-width: map.get($grid-max-breakpoints, xs)) {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }
}

.panel-details {
  background-color: palette.$neutral50;
  display: none;

  @include panel-padding;

  @media print {
    display: flex;
    flex-direction: column;
  }

  &--open {
    display: flex;
    flex-direction: column;
  }

  &--line {
    background: palette.$white;
    border-bottom: 1px solid palette.$neutral500;
  }

  &--white {
    background: palette.$white;
  }
}

.status-message {
  font-size: font-settings.$font-size-sm;
  color: palette.$cherry500;
  display: flex;
  margin-bottom: spacers.getSpacer(2xs) * -1;
  grid-column: 1 / -1;

  span {
    padding-left: 5px;
    align-self: center;
    font-size: font-settings.$font-size-sm;
  }

  &--new {
    color: palette.$blueberry800;
  }
}

.header-container {
  grid-column: 1 / -1;
}

.datetime-container {
  display: flex;
  flex-direction: column;

  @media (min-width: map.get($grid-breakpoints, lg)) {
    padding-top: spacers.getSpacer(xs);
    flex-direction: row;
  }

  &__icon {
    display: flex;
    align-items: center;
    padding-bottom: spacers.getSpacer(2xs);

    @media (min-width: map.get($grid-breakpoints, lg)) {
      padding-top: 0;
      padding-right: spacers.getSpacer(m);
      padding-bottom: 0;
    }

    span {
      padding-left: spacers.getSpacer(2xs);
      font-size: font-settings.$font-size-sm;
    }
  }
}
