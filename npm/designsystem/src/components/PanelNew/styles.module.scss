@use '../../scss/spacers' as spacers;
@use '../../scss/supernova/styles/colors' as *;
@use '../../scss/breakpoints' as breakpoints;

.panel {
  display: grid;
  gap: spacers.getSpacer(m);
  padding: spacers.getSpacer(m);
  grid-template-areas:
    'header'
    'contentA'
    'contentB'
    'contentC';

  &--b-first {
    grid-template-areas:
      'header'
      'contentB'
      'contentA'
      'contentC';
  }

  &__pre-container {
    grid-area: header;
  }

  &__content {
    width: 100%;
    height: 100%;

    &--a {
      grid-area: contentA;
    }

    &--b {
      grid-area: contentB;
    }

    &--c {
      grid-area: contentC;
    }
  }

  &--horizontal {
    @media (min-width: breakpoints.get(md)) {
      grid-template-areas:
        'header header header'
        'contentA contentB contentC';
    }
  }

  &--vertical {
    @media (min-width: breakpoints.get(md)) {
      // @todo: sjekk opp om stacking skal hensyntas her
      grid-template-areas:
        'header'
        'contentA'
        'contentB'
        'contentC';
    }
  }

  &--combined {
    @media (min-width: breakpoints.get(md)) {
      grid-template-areas:
        'header header'
        'contentA contentB'
        'contentC contentC';
    }
  }

  &--bAsRightCol {
    @media (min-width: breakpoints.get(md)) {
      grid-template-areas:
        'header header'
        'contentA contentB'
        'contentC contentB';
    }
  }

  &--white {
    background-color: var(--color-base-background-white);
  }

  &--blueberry {
    background-color: var(--color-base-background-blueberry);
  }

  &--neutral {
    background-color: var(--color-base-background-neutral);
  }

  &--fill {
    border: none;
  }

  &--line {
    border-top: 1px solid var(--color-base-border-ondark);
    border-bottom: 1px solid var(--color-base-border-ondark);
  }

  &--border {
    border: 8px solid var(--core-color-neutral-100);
  }
}
