@use 'sass:map';
@use '../../scss/spacers' as spacers;
@use '../../scss/palette' as palette;
@use '../../scss/font-settings' as font-settings;
@use '../../scss/breakpoints' as breakpoints;
@import '../../scss/supernova/styles/colors.css';

.drawer {
  position: fixed;
  inset: 0;
  display: flex;
  justify-content: center;
  align-items: flex-end;

  &__overlay {
    position: fixed;
    width: 100%;
    height: 100%;
    opacity: 0;
    background-color: rgb(0 0 0 / 40%);
  }

  &__container {
    display: flex;
    flex-direction: column;
    position: fixed;
    width: 100%;
    max-height: 90dvh;
    overflow: hidden;
    transform: translateY(100%);
    background-color: var(--core-color-white);
    border-radius: 0.75rem 0.75rem 0 0;
    outline: none;

    @media (min-width: map.get(breakpoints.$grid-breakpoints, md)) {
      justify-content: space-between;
      height: 100%;
      max-height: 100dvh;
      border-radius: 0;
      max-width: 32rem;
      transform: translateX(-100%);
      left: 0;
    }

    &--right {
      @media (min-width: map.get(breakpoints.$grid-breakpoints, md)) {
        transform: translateX(100%);
        right: 0;
        left: unset;
      }
    }

    @include breakpoints.tiny-screens-media-query {
      max-height: 100dvh;
      border-radius: 0;
    }

    &__inner {
      display: flex;
      flex-direction: column;
      max-height: inherit;
      overflow: hidden;

      @include breakpoints.tiny-screens-media-query {
        overflow-y: auto;

        &:focus-visible {
          outline: 1px solid palette.$black;
          outline-offset: -1px;
        }
      }
    }
  }

  &__header {
    display: flex;
    align-items: center;
    justify-content: space-between;

    // legg til padding for Ã¥ gi plass til close button
    padding: spacers.getSpacer(xs) 2.75rem spacers.getSpacer(xs) spacers.getSpacer(2xs);

    @media (min-width: map.get(breakpoints.$grid-breakpoints, md)) {
      padding: spacers.getSpacer(xs) 2.75rem spacers.getSpacer(xs) spacers.getSpacer(xs);
    }

    @include breakpoints.tiny-screens-media-query {
      padding: spacers.getSpacer(4xs) 0;
      flex-direction: column-reverse;
      align-items: flex-start;
    }

    &--no-close-button {
      padding: spacers.getSpacer(xs) spacers.getSpacer(2xs);

      @media (min-width: map.get(breakpoints.$grid-breakpoints, md)) {
        padding: spacers.getSpacer(xs);
      }
    }

    &__close-button {
      position: absolute;
      top: 0;
      right: 0;
    }
  }

  &__content {
    overflow-y: auto;
    padding: spacers.getSpacer(xs) spacers.getSpacer(2xs);

    &:focus-visible {
      outline: 1px solid palette.$black;
      outline-offset: -1px;
    }

    @media (min-width: map.get(breakpoints.$grid-breakpoints, md)) {
      padding: spacers.getSpacer(s) spacers.getSpacer(xs);
    }

    @include breakpoints.tiny-screens-media-query {
      overflow-y: unset;
    }

    // Scroll shadow
    // Inspired by: https://css-tricks.com/books/greatest-css-tricks/scroll-shadows/
    background:
      linear-gradient(white 30%, rgba(255 255 255 / 0%)) center top,
      linear-gradient(rgba(255 255 255 / 0%), white 70%) center bottom,
      linear-gradient(rgba(0 0 0 / 46%), rgba(0 0 0 / 0%)) center top,
      linear-gradient(rgba(0 0 0 / 0%), rgba(0 0 0 / 46%)) center bottom;
    background-repeat: no-repeat;
    background-size:
      100% 40px,
      100% 40px,
      100% 16px,
      100% 16px;
    background-attachment: local, local, scroll, scroll;
  }

  &__footer {
    display: flex;
    gap: spacers.getSpacer(m);
    padding: spacers.getSpacer(s) spacers.getSpacer(2xs);

    @media (min-width: map.get(breakpoints.$grid-breakpoints, md)) {
      padding: spacers.getSpacer(m) spacers.getSpacer(xs);
    }

    @include breakpoints.tiny-screens-media-query {
      flex-wrap: wrap;
      gap: spacers.getSpacer(2xs) 0;
      padding: spacers.getSpacer(2xs) 0;
    }
  }
}
