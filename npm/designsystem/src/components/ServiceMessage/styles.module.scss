@use 'sass:map';
@use '../../scss/spacers' as spacers;
@use '../../scss/palette' as palette;
@use '../../scss/font-settings' as font-settings;
@import '../../scss/breakpoints';
@import '../../scss/grid';

.service-message {
  $servicemessage: &;

  border-width: 1px;
  border-bottom-style: solid;

  &:first-of-type {
    border-top-style: solid;
  }

  &--success {
    background-color: palette.$kiwi50;

    &:hover {
      background-color: rgba-to-rgb(rgba(palette.$kiwi500, 0.1), palette.$kiwi50);
    }

    &#{$servicemessage},
    &#{$servicemessage}__label-container {
      border-color: palette.$kiwi900;
    }
  }

  &--info {
    background-color: palette.$blueberry50;

    &:hover {
      background-color: rgba-to-rgb(rgba(palette.$blueberry500, 0.1), palette.$blueberry50);
    }

    &#{$servicemessage},
    &#{$servicemessage}__label-container {
      border-color: palette.$blueberry700;
    }
  }

  &--warn {
    background-color: palette.$banana50;

    &:hover {
      background-color: rgba-to-rgb(rgba(palette.$banana500, 0.1), palette.$banana50);
    }

    &#{$servicemessage},
    &#{$servicemessage}__label-container {
      border-color: palette.$banana700;
    }
  }

  &--error {
    background-color: palette.$cherry50;

    &:hover {
      background-color: rgba-to-rgb(rgba(palette.$cherry500, 0.1), palette.$cherry50);
    }

    &#{$servicemessage},
    &#{$servicemessage}__label-container {
      border-color: palette.$cherry700;
    }
  }

  &__container {
    @include make-container;
    @include make-container-max-widths;
  }

  &__row {
    @include make-row;
  }

  &__col {
    @include make-col-ready;
    @include make-col(12);
  }

  &__label-container {
    position: relative;
    padding-top: spacers.getSpacer(3xs);
    padding-bottom: spacers.getSpacer(3xs);

    @media (min-width: map.get($grid-breakpoints, lg)) {
      padding-top: spacers.getSpacer(2xs);
      padding-bottom: spacers.getSpacer(2xs);
    }

    &--has-expander:has(:focus-visible) {
      box-shadow: inset 0 0 0 2px palette.$black;
    }
  }

  &__label {
    display: flex;
    width: 100%;
    align-items: center;
    gap: spacers.getSpacer(2xs);

    @media (min-width: map.get($grid-breakpoints, md)) {
      gap: spacers.getSpacer(m);
    }
  }

  &__title {
    width: 100%;
    font-weight: 700;
    font-size: font-settings.$font-size-xs;
    line-height: 1.25rem;

    @media (min-width: map.get($grid-breakpoints, md)) {
      font-size: font-settings.$font-size-sm;
    }
  }

  &__toggle {
    all: unset;

    // Triks for at hele labelen skal trigge klikk p√• knappen
    &::after {
      inset: 0;
      content: '';
      position: absolute;
    }
  }

  &__content {
    margin-left: calc(38px + spacers.getSpacer(2xs));
    margin-right: calc(38px + spacers.getSpacer(2xs));
    padding-top: spacers.getSpacer(xs);
    padding-bottom: spacers.getSpacer(xs);

    @media (min-width: map.get($grid-breakpoints, md)) {
      margin-left: calc(38px + spacers.getSpacer(m));
      margin-right: calc(38px + spacers.getSpacer(m));
    }

    @media (min-width: map.get($grid-breakpoints, lg)) {
      margin-left: calc(48px + spacers.getSpacer(m));
      margin-right: calc(48px + spacers.getSpacer(m));
      padding-top: spacers.getSpacer(2xs);
      padding-bottom: spacers.getSpacer(s);
    }
  }

  &__info {
    font-size: font-settings.$font-size-xs;
    line-height: 1.25rem;
    margin: 0;

    @media (min-width: map.get($grid-breakpoints, lg)) {
      margin-top: spacers.getSpacer(xs);
      line-height: 1.625rem;
      font-size: font-settings.$font-size-sm;
    }

    &--extra {
      font-size: 0.875rem;
      margin-top: spacers.getSpacer(2xs);

      @media (min-width: map.get($grid-breakpoints, lg)) {
        margin-top: spacers.getSpacer(xs);
        font-size: font-settings.$font-size-xs;
        line-height: font-settings.$lineheight-size-xs;
      }
    }
  }

  &__actions {
    display: flex;
    justify-content: space-between;
    flex-flow: column wrap;
    gap: spacers.getSpacer(2xs);
    margin-top: spacers.getSpacer(2xs);

    @media (min-width: map.get($grid-breakpoints, sm)) {
      flex-direction: row;
    }

    @media (min-width: map.get($grid-breakpoints, lg)) {
      margin-top: spacers.getSpacer(s);
    }
  }

  &__action {
    display: flex;
    align-items: center;
    border: none;
    width: fit-content;
    color: palette.$blueberry700;
    font-weight: 600;
    font-size: font-settings.$font-size-xs;
    line-height: 1.25rem;
    background-color: transparent;
    text-decoration: none;
    padding: 0.5rem;
    margin-left: -0.5rem;
    gap: spacers.getSpacer(xs);

    &:hover,
    &:active {
      background-color: rgb(88 170 187 / 10%);
    }

    &:focus-visible {
      box-shadow: 0 0 0 2px palette.$black;
      background-color: transparent;
      border: 0;
      outline: none;
    }

    &--close {
      @media (min-width: map.get($grid-breakpoints, lg)) {
        margin-left: auto;
      }
    }
  }

  &__close {
    z-index: 1;
  }
}
