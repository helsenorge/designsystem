resources:
  repositories:
    - repository: templates #internt navn på repo, brukes i referanser
      type: git #type repo (les mer i dokumentasjon)
      name: HN-AzureDevopsPipelines #Navn på repo som inneholder templates

trigger:
  branches:
    include:
      - master
      - feature/*
  tags:
    include:
      - 'v*'

pool:
  name: Helsenorge_LinuxScaleSetAgents

variables:
  - name: node_version
    value: 18
  - name: project_name
    value: Designsystem.Packages.Designsystem.CI
  - name: working_directory
    value: .
  - name: package_directory
    value: npm/designsystem
  - name: sonarqube_endpoint
    value: 'https://sonarqube.int-hn.nhn.no'
  - name: BROWSERSLIST_IGNORE_OLD_DATA
    value: true
  - name: HUSKY
    value: 0

stages:
  # stage build, test and analyze
  - stage:
    displayName: Build, Test and Analyze
    condition: succeededOrFailed() #Vent på de foregående stegene, men kjør selv om de feiler
    jobs:
      - job:
        displayName: Build, Test and Analyze
        steps:
          # Prepare Sonarqube
          - task: SonarQubePrepare@5
            displayName: Sonarqube Prepare
            inputs:
              SonarQube: $(sonarqube_endpoint)
              scannerMode: 'CLI'
              cliProjectKey: $(project_name)
              cliProjectName: $(project_name)
              configMode: manual
              extraProperties: |
                sonar.sources=$(package_directory)/
                sonar.tests=$(package_directory)/
                sonar.test.inclusions=$(package_directory)/**/*.test.tsx
                sonar.exclusions=**/*.test.tsx
                sonar.coverage.exclusions=**/__*__/**/*,**/*.config.js,*.stories.tsx
                sonar.javascript.lcov.reportPaths=$(package_directory)/coverage/lcov.info
                sonar.typescript.tsconfigPath=$(package_directory)/tsconfig.json

          # Set node version
          - task: UseNode@1
            displayName: 'Use Node version'
            inputs:
              version: $(node_version)

          # npm tasks
          # ci / install
          - task: Npm@1
            displayName: npm ci
            inputs:
              command: ci
              workingDir: $(working_directory)

          # Lint commit message
          - bash: |
              PR_TITLE="$(curl --silent -u azdo:$SYSTEM_ACCESSTOKEN \
              $(System.CollectionUri)_apis/git/repositories/$(Build.Repository.ID)/pullRequests/$(System.PullRequest.PullRequestId)?api-version=5.1 \
              | jq -r .title)"
              echo "##vso[task.setvariable variable=Pr.Title]$PR_TITLE"
            env:
              SYSTEM_ACCESSTOKEN: $(System.AccessToken)
            displayName: Extract pull request title
            condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))

          - bash: |
              echo "${PR_TITLE}" | npx commitlint -V
            env:
              PR_TITLE: $(Pr.Title)
            displayName: Lint pull request title
            condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))

          # audit
          - task: Npm@1
            displayName: 'npm audit (prod)'
            inputs:
              command: custom
              workingDir: npm/designsystem
              customCommand: 'audit --registry=https://registry.npmjs.org/ --omit=dev --audit-level=moderate --package-lock-only'
            continueOnError: true

          - task: Npm@1
            displayName: 'npm audit'
            inputs:
              command: custom
              workingDir: npm/designsystem
              customCommand: 'audit --registry=https://registry.npmjs.org/ --audit-level=high --package-lock-only'
            continueOnError: true

          - task: Npm@1
            displayName: prettier
            inputs:
              command: custom
              workingDir: $(working_directory)
              customCommand: 'run prettier'
            condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))

          - task: Npm@1
            displayName: stylelint
            inputs:
              command: custom
              workingDir: $(working_directory)
              customCommand: 'run stylelint'
            condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))
            continueOnError: true # @todo Fjern når stylelint-feil er rettet

          - task: Npm@1
            displayName: eslint
            inputs:
              command: custom
              workingDir: $(working_directory)
              customCommand: 'run eslint'
            condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))

          # build
          - task: Npm@1
            displayName: build
            inputs:
              command: custom
              workingDir: $(working_directory)
              customCommand: 'run build'

          # test
          - task: Npm@1
            displayName: test
            inputs:
              command: custom
              workingDir: $(working_directory)
              customCommand: 'run test'

          # Test results
          - task: PublishTestResults@2
            displayName: 'Publish test results'
            inputs:
              testResultsFiles: '$(package_directory)/test-report.xml'
            condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
          - task: PublishCodeCoverageResults@1
            displayName: 'Publish code coverage'
            inputs:
              codeCoverageTool: Cobertura
              summaryFileLocation: '$(package_directory)/coverage/cobertura-coverage.xml'
            condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

          # Run Code Analysis task
          - task: SonarQubeAnalyze@5
            displayName: Sonarqube Analyze

          # Publish Quality Gate Result task
          - task: SonarQubePublish@5
            inputs:
              pollingTimeoutSec: '300'

          # autenticate
          - script:
              'echo "registry=https://pkgs.dev.azure.com/nhnfelles/_packaging/Helsenorge/npm/registry/" >>  $(working_directory)/.npmrc'
            displayName: 'Add Helsenorge-registry to .npmrc'
          - task: npmAuthenticate@0
            displayName: 'npm Authenticate .npmrc'
            inputs:
              workingFile: $(working_directory)/.npmrc

          # Sjekk at alle filer i branchen er commited
          - script: 'git update-index --assume-unchanged .npmrc'
            displayName: 'Ignore changes to .npmrc'
          - script: 'git diff --exit-code'
            displayName: 'Check for uncommited changes'

          - task: Npm@1
            displayName: 'publish designsystem to Helsenorge-registry (latest)'
            inputs:
              command: custom
              verbose: false
              customCommand: 'run publish:latest'
              workingDir: $(working_directory)
              publishRegistry: useFeed
              publishFeed: '926a1f6a-72f8-4464-b9be-a7978dee78b0'
            continueOnError: true
            condition:
              and(succeeded(), in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI', 'Manual'),
              contains(variables['Build.SourceBranch'], 'refs/tags/v'), not(contains(variables['Build.SourceBranch'], 'beta')),
              not(contains(variables['Build.SourceBranch'], '-')))

          - task: Npm@1
            displayName: 'publish designsystem to Helsenorge-registry (beta)'
            inputs:
              command: custom
              verbose: false
              customCommand: 'run publish:beta'
              workingDir: $(working_directory)
              publishRegistry: useFeed
              publishFeed: '926a1f6a-72f8-4464-b9be-a7978dee78b0'
            continueOnError: true
            condition:
              and(succeeded(), in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI', 'Manual'),
              contains(variables['Build.SourceBranch'], 'refs/tags/v'), contains(variables['Build.SourceBranch'], 'beta'))

          # Deploy Storybook
          - task: Npm@1
            displayName: 'build storybook'
            inputs:
              command: custom
              workingDir: npm/designsystem
              customCommand: 'run build-storybook'
            condition:
              and(succeeded(), in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI', 'Manual'), in(variables['Build.SourceBranch'],
              'refs/heads/master', 'refs/heads/feature/next'))

          - task: Npm@1
            displayName: 'deploy storybook (master)'
            inputs:
              command: custom
              workingDir: npm/designsystem
              customCommand: 'run deploy:storybook'
            env:
              NETLIFY_AUTH_TOKEN: $(Netlify.Auth.Token)
            condition:
              and(succeeded(), in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI', 'Manual'), eq(variables['Build.SourceBranch'],
              'refs/heads/master'))

          - task: Npm@1
            displayName: 'deploy storybook (next)'
            inputs:
              command: custom
              workingDir: npm/designsystem
              customCommand: 'run deploy:storybook:next'
            env:
              NETLIFY_AUTH_TOKEN: $(Netlify.Auth.Token)
            condition:
              and(succeeded(), in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI', 'Manual'), eq(variables['Build.SourceBranch'],
              'refs/heads/feature/next'))

  # Copy to Github
  - stage:
    displayName: 'Github'
    condition:
      and(succeeded(), in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI', 'Manual'), eq(variables['Build.SourceBranch'],
      'refs/heads/master'))
    jobs:
      - job:
        displayName: 'Copy to Github'
        steps:
          - bash: |
              git push --prune https://$(Github.PAT)@github.com/helsenorge/designsystem \
                  +refs/remotes/origin/*:refs/heads/* +refs/tags/*:refs/tags/*
            displayName: 'Copy to Github'
